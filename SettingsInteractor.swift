//
//  SettingsInteractor.swift
//  earlyone
//
//  Created by Galoyannnn on 01.06.21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsBusinessLogic {
    func configureInitialState(request: Settings.Main.Request)
    func updateState(request: Settings.Update.Request)
}

protocol SettingsDataStore {
    //var name: String { get set }
}

class SettingsInteractor: SettingsBusinessLogic, SettingsDataStore {
    var presenter: SettingsPresentationLogic?
    var worker: SettingsWorker?
    var items:[Settings.Cell] = []

    // MARK: Data load
    
    func configureInitialState(request: Settings.Main.Request) {        
        let response = Settings.Main.Response(items: [])
        presenter?.present(response: response)
        loadData()
    }
    
    func updateState(request: Settings.Update.Request) {
        loadData()
    }
    
    func loadData() {
        
        let switchNotificationAction: (Bool) -> Void = { [weak self] _ in
            guard let self = self else {
                return
            }
            let response = Settings.Alert.Response(content: (Localizable.settings_alert_notification_title, Localizable.settings_alert_open, Localizable.settings_alert_cancel))
            self.presenter?.present(response: response)
        }
        
        
        NotificationManager.shared.checkNotificationEnabled { [weak self] notificationEnabled in
            guard let self = self else {
                return
            }
            
            if #available(iOS 13.0, *) {
                let switchDarkAction: (Bool) -> Void = { [weak self] enabled in
                    guard let _ = self else {
                        return
                    }
                    AccountManager.shared.store(darkModeEnabled: enabled)
                    AppDelegate.shared.window?.overrideUserInterfaceStyle = enabled ? .dark : .light
                }
                let darkModeEnabled = AccountManager.shared.darkModeEnabled ?? (UITraitCollection.current.userInterfaceStyle == .dark)
                
                self.items = [Settings.Cell(identifier: 0,
                                            title: Localizable.settings_interface,
                                            enabled: darkModeEnabled,
                                            cellAction: switchDarkAction),
                              Settings.Cell(identifier: 1,
                                            title: Localizable.settings_notifications,
                                            enabled: notificationEnabled,
                                            cellAction: switchNotificationAction)
                              
                ]
            } else {
                self.items = [ Settings.Cell(identifier: 0, title: Localizable.settings_notifications, enabled: notificationEnabled, cellAction: switchNotificationAction)]
            }
            self.onDataLoaded()
        }
    }
    
    func onDataLoaded() {
        let response = Settings.Update.Response(items: items)
        presenter?.present(response: response)
    }
}
