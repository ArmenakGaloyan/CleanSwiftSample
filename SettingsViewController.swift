//
//  SettingsViewController.swift
//  earlyone
//
//  Created by Galoyannnn on 01.06.21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsDisplayLogic: AnyObject {
    func display(viewModel: Settings.Main.ViewModel)
    func display(viewModel: Settings.Update.ViewModel)
    func display(viewModel: Settings.Alert.ViewModel)
}

class SettingsViewController: UIViewController, SettingsDisplayLogic {
    var interactor: SettingsBusinessLogic?
    var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SettingsInteractor()
        let presenter = SettingsPresenter()
        let router = SettingsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        initObservers()
        configureViews()
        configureInitialState()
    }
    
    private func initObservers() {
        NotificationCenter.default.addObserver(self, selector: #selector(didBecomeActive), name: UIApplication.didBecomeActiveNotification, object: nil)

    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc func didBecomeActive() {
        updateState()
    }
    
    // MARK: Data load
    
    internal var tableView: UITableView = UITableView.pinable()
    internal var data: [Settings.Cell] = []
    internal var cellStyleProvider: CellStyleProvider?
    internal var cellUIProvider: CellUIProvider?
    
    func configureInitialState() {
        let request = Settings.Main.Request()
        interactor?.configureInitialState(request: request)
    }
    
    func updateState() {
        let request = Settings.Update.Request()
        interactor?.updateState(request: request)
    }
    
    func display(viewModel: Settings.Main.ViewModel) {
        cellStyleProvider = viewModel.cellStyleProvider
        cellUIProvider = viewModel.cellUIProvider
        data = viewModel.items
        updateViews()
    }
    
    func display(viewModel: Settings.Update.ViewModel) {
        data = viewModel.items
        updateViews()
    }
    
    func display(viewModel: Settings.Alert.ViewModel) {
        showAlert(viewModel.alertContent.0, viewModel.alertContent.1, viewModel.alertContent.2)
    }
    
    func configureViews() {
        configureTableView()
        configureLayout()
    }
    
    
    func configureTableView() {
        tableView.register(SettingsTableViewCell.self, forCellReuseIdentifier: "TableViewCell")
        tableView.separatorStyle = .none
        tableView.estimatedRowHeight = 200
        tableView.rowHeight = UITableView.automaticDimension
        tableView.backgroundColor = .clear
        tableView.delegate = self
        tableView.dataSource = self
        tableView.contentInset = UIEdgeInsets(top: 10, left: 0, bottom: 0, right: 0)
    }
    
    internal func configureLayout() {
        view.addSubview(tableView)
        tableView.pinToSafeArea(of: view, attributes: [.top(), .bottom()])
        tableView.pin(to: view, with: [.leading(), .trailing()])
    }
    
    func updateViews() {
        tableView.reloadData()
        updateTexts()
    }
    
    
    func updateTexts() {
        navigationItem.title = Localizable.title_settings.localized()
    }
    
    internal func dequeueCell(for tableView: UITableView, at indexPath: IndexPath) -> SettingsTableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "TableViewCell", for: indexPath) as? SettingsTableViewCell else {
            return SettingsTableViewCell()
        }
        return cell
    }
    
    func showAlert(_ title: String, _ positiveAction: String, _ negativeAction: String) {
        
        let alertController: UIAlertController = UIAlertController(title: title.localized(),
                                                                   message: nil,
                                                                   preferredStyle: .alert)
        let goToSettings: UIAlertAction = UIAlertAction(title: positiveAction.localized(),
                                                        style: .default,
                                                        handler: { (action) in
            if let appSettings = URL(string: UIApplication.openSettingsURLString + Bundle.main.bundleIdentifier!) {
                if UIApplication.shared.canOpenURL(appSettings) {
                    UIApplication.shared.open(appSettings)
                }
            }
        })
        alertController.addAction(goToSettings)
        let cancel: UIAlertAction = UIAlertAction(title: negativeAction.localized(),
                                                  style: .cancel,
                                                  handler: { (action) in
            self.updateState()
        })
        alertController.addAction(cancel)
        
        self.present(alertController, animated: true)
        
    }
}

extension SettingsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = dequeueCell(for: tableView, at: indexPath)
        let item = data[indexPath.row]
        
        cell.uiProvider = cellUIProvider
        cell.styleProvider = cellStyleProvider
        cell.primaryLabel?.text = item.title.localized()
        cell.switchView?.isOn = item.enabled
        cell.switchAction = item.cellAction
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return data.count
    }
}

extension SettingsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {


    }
}
